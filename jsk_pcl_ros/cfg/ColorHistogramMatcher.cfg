#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

try:
    import imp
    imp.find_module(PACKAGE)
    from dynamic_reconfigure.parameter_generator_catkin import *;
except:
    import roslib; roslib.load_manifest(PACKAGE)
    from dynamic_reconfigure.parameter_generator import *;

from math import pi

gen = ParameterGenerator ()

gen.add("coefficient_thr", double_t, 0, "threshold of coefficient", 0.9, 0.0, 1.0)
gen.add("bin_size", double_t, 0, "bin size", 10, 0, 100)
histogram_method_enum = gen.enum([gen.const("HUE", int_t, 0, "use hue"),
                                  gen.const("SATURATION", int_t, 1,
                                            "use saturation"),
                                  gen.const("VALUE", int_t, 2, "use value"),
                                  gen.const("HUE_AND_SATURATION", int_t, 3, 
                                            "use hue and saturation"),],
                                  "histogram to be used")
gen.add("histogram_method", int_t, 0, "histogram method", 3, 0, 3, 
        edit_method = histogram_method_enum)
gen.add("publish_colored_cloud", bool_t, 0, "publish coloerd point cloud that shows coefficience", True)
gen.add("power", int_t, 0, "with which make coefficience powered", 4, 1, 6);
gen.add("color_min_coefficient", double_t, 0, "show color from", 0, 0.0, 1.0)
gen.add("color_max_coefficient", double_t, 0, "show color to", 1.0, 0.0, 1.0)
show_method_enum = gen.enum([gen.const("blue_to_red", int_t, 0, "simple"),
                                  gen.const("thermo", int_t, 1,"use thermo"),],
                                  "show_method to be used")
gen.add("show_method", int_t, 0, "show method", 0, 0, 1, 
        edit_method = show_method_enum)
exit (gen.generate (PACKAGE, "jsk_pcl_ros", "ColorHistogramMatcher"))
