<library path="lib/libjsk_pcl_ros">

  <class name="jsk_pcl/NodeletPointCloudThrottle" type="NodeletPointCloudThrottle"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageThrottle" type="NodeletImageThrottle"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageMUX" type="NodeletImageMUX"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageDEMUX" type="NodeletImageDEMUX"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>

  <class name="jsk_pcl/ParticleFilterTracking" type="ParticleFilterTracking"
         base_class_type="nodelet::Nodelet">
    <description>
      particle filter based tracker using KLDAdaptiveParticleFilterOMPTracker
    </description>
  </class>

  <class name="jsk_pcl/RGBColorFilter" type="RGBColorFilter"
         base_class_type="nodelet::Nodelet">
    <description>
      filter using RGB color scale
    </description>
  </class>

  <class name="jsk_pcl/HSVColorFilter" type="HSVColorFilter"
         base_class_type="nodelet::Nodelet">
    <description>
      filter using HSV color scale
    </description>
  </class>

  <class name="jsk_pcl/ResizePointsPublisher" type="ResizePointsPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      Resize PointCloud
    </description>
  </class>

  <class name="jsk_pcl/PointcloudScreenpoint" type="PointcloudScreenpoint"
         base_class_type="nodelet::Nodelet">
    <description>
      subscribe pointcloud2 and convert screenpoint(x,y) to 3dpoint(x,y,z)
      The pointcloud must be same size as screen, DepthImageCreator
      take pointcloud and camera info to generate pointlocud.
    </description>
  </class>

  <class name="jsk_pcl/DepthImageCreator" type="DepthImageCreator"
         base_class_type="nodelet::Nodelet">
    <description>
      DepthImageCreator take pointcloud and camera info to generate pointlocud.
    </description>
  </class>

  <class name="jsk_pcl/EuclideanClustering" type="pcl_ros::EuclideanClustering"
         base_class_type="nodelet::Nodelet">
    <description>
      Clustering based on Euclidean distance
    </description>
  </class>

  <class name="jsk_pcl/ClusterPointIndicesDecomposer" type="ClusterPointIndicesDecomposer"
         base_class_type="nodelet::Nodelet">
    <description>
      decompose jsk_pcl_ros::ClusterPointIndices into PointCloud2
    </description>
  </class>
  <class name="jsk_pcl/ClusterPointIndicesDecomposerZAxis" type="ClusterPointIndicesDecomposerZAxis"
         base_class_type="nodelet::Nodelet">
    <description>
      decompose jsk_pcl_ros::ClusterPointIndices into PointCloud2 with sorting according to z axis
    </description>
  </class>

  <class name="jsk_pcl/CentroidPublisher" type="CentroidPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      publish the centroid of the pointcloud to /tf
    </description>
  </class>
  <class name="jsk_pcl/VoxelGridDownsampleManager" type="VoxelGridDownsampleManager"
         base_class_type="nodelet::Nodelet">
    <description>
      donwsample pointcloud in voxel
    </description>
  </class>
  <class name="jsk_pcl/VoxelGridDownsampleDecoder" type="VoxelGridDownsampleDecoder"
         base_class_type="nodelet::Nodelet">
    <description>
      decode donwsampled pointcloud
    </description>
  </class>
  <class name="jsk_pcl/Snapit" type="SnapIt"
         base_class_type="nodelet::Nodelet">
    <description>
      snapit nodelet node
    </description>
  </class>
  <class name="jsk_pcl/KeypointsPublisher" type="KeypointsPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      keypoints_publisher nodelet node
    </description>
  </class>
  <class name="jsk_pcl/HintedPlaneDetector" type="HintedPlaneDetector"
         base_class_type="nodelet::Nodelet">
    <description>
      HintedPlaneDetector nodelet node
    </description>
  </class>
</library>
