#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

try:
    import imp
    imp.find_module(PACKAGE)
    from dynamic_reconfigure.parameter_generator_catkin import *;
except:
    import roslib; roslib.load_manifest(PACKAGE)
    from dynamic_reconfigure.parameter_generator import *;

from math import pi

gen = ParameterGenerator ()

gen.add("hint_outlier_threashold", double_t, 0, "outlier threshold to detect hint plane", 0.1, 0.0, 1.0)
gen.add("hint_max_iteration", int_t, 0, "max iteration to detect hint plane", 100, 1, 10000)
gen.add("hint_min_size", int_t, 0, "minimum number of inliers included in hint plane", 100, 0, 1000)
gen.add("outlier_threashold", double_t, 0, "outlier threshold to detect plane", 0.1, 0.0, 1.0)
gen.add("max_iteration", int_t, 0, "max iteration to detect plane", 100, 1, 10000)
gen.add("min_size", int_t, 0, "minimum number of inliers included in plane", 100, 0, 1000)
gen.add("eps_angle", double_t, 0, "eps angle between hint plane and larger plane", 0.01, 0, 1.57)
gen.add("enable_density_filtering", bool_t, 0, "enable density filtering", True)
gen.add("density_radius", double_t, 0, "radius used in density filtering", 0.1, 0, 1.0)
gen.add("density_num", int_t, 0, "number of minimum points included in sphere", 10, 0, 100)
gen.add("enable_distance_filtering", bool_t, 0, "enable distance filtering", True)
gen.add("enable_normal_filtering", bool_t, 0, "enable normal filtering", True)
gen.add("normal_filter_eps_angle", double_t, 0, "eps angle between hint plane and pointcloud to filter candidates", 0.01, 0, 1.57)
gen.add("enable_euclidean_filtering", bool_t, 0, "enable euclidean filtering", True)
gen.add("euclidean_clustering_filter_tolerance", double_t, 0, "tolerance distance for euclidean based filtering", 0.1, 0.001, 1.0)
gen.add("euclidean_clustering_filter_min_size", int_t, 0, "minimum size of the cluster for euclidean filtering", 20, 0, 1000)

exit (gen.generate (PACKAGE, "jsk_pcl_ros", "HintedPlaneDetector"))
