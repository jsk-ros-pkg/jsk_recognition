#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

from dynamic_reconfigure.parameter_generator_catkin import *;

from math import pi

gen = ParameterGenerator ()

estimation_method_enum = gen.enum([gen.const("AVERAGE_3D_GRADIENT", int_t, 0, "AVERAGE 3D GRADIENT, no curvature is available"),
                                   gen.const("COVARIANCE_MATRIX", int_t, 1, "COVARIANCE_MATRIX, curvature is available"),
                                   gen.const("AVERAGE_DEPTH_CHANGE", int_t, 2, "AVERAGE_DEPTH_CHANGE, no curvature is available")],
                                   "normal estimation method")
gen.add("max_depth_change_factor", double_t, 0, "max depth change factor", 0.02, 0.0, 1.0)
gen.add("normal_smoothing_size", double_t, 0, "normal smoothing size parameter", 20.0, 0.0, 100.0)
gen.add("estimation_method", int_t, 0, "estimation method", 1, 0, 2, edit_method = estimation_method_enum)
gen.add("depth_dependent_smoothing", bool_t, 0, "use depth dependent smoothing", False)
gen.add("border_policy_ignore", bool_t, 0, "ignore border policy", True)
gen.add("max_search_neighbors", int_t, 0, "the maximum number of the neighbors used in edge detection", 100, 0, 1000);
gen.add("depth_discontinuation_threshold", double_t, 0, "threshold about depth discontinuation used in edge detection",
                                           0.04, 0, 0.3)
gen.add("publish_normal", bool_t, 0, "publish normal pointcloud", False)
gen.add("use_nan_boundary", bool_t, 0, "Detect NAN Boundary Edge", False)
gen.add("use_occluding", bool_t, 0, "Detect Occluding Edge", True)
gen.add("use_occluded", bool_t, 0, "Detect Occluded Edge", True)
gen.add("use_curvature", bool_t, 0, "Detect Curvature Edge", True)
gen.add("use_rgb", bool_t, 0, "Detect RGB Edge", False)
gen.add("use_straightline_detection", bool_t, 0, "Detect Straight Lines", True)
gen.add("rho", double_t, 0, "rho Used in Straight Lines Detection(in pixel)", 1, 0, 50)
gen.add("theta",        double_t, 0, "The resolution of the parameter \theta in radians. We use 1 degree (CV_PI/180) Used in Straight Lines Detection",  1, 1, 90)
gen.add("straightline_threshold",    int_t,    0, "The minimum number of intersections to 'detect' a line, Used in Straight Lines Detection",  50, 1, 500)
gen.add("min_line_length", double_t, 0, "The minimum number of points that can form a line. Lines with less than this number of points are disregarded. Used in Straight Lines Detection.",  50, 0, 500)
gen.add("max_line_gap",   double_t, 0, "The maximum gap between two points to be considered in the same line. Used in Straight Lines Detection.",  10, 0, 100)
gen.add("publish_debug_image", bool_t, 0, "Publish Debug Images", True)

exit (gen.generate (PACKAGE, "jsk_pcl_ros", "OrganizedEdgeDetector"))
