(defun generate-object-model
  (object-shape)
  (cond ((string= object-shape "l-shaped-block")
         (let* ((cube1 (make-cube 200 50 100))
                (cube2 (make-cube 200 50 100))
                )
           (send cube2 :rotate pi/2 :z)
           (send cube2 :translate (float-vector 75 125 0) :world)
           (setq *obj* (body+ cube1 cube2))
           )
         )
        ((string= object-shape "l-shaped-block2")
         (let* ((cube1 (make-cube 500 120 120))
                (cube2 (make-cube 250 120 120))
                )
           (send cube2 :rotate pi/2 :z)
           (send cube2 :translate (float-vector 190 185 0) :world)
           (setq *obj* (body+ cube1 cube2))
           )
         )
        ((equal object-shape "cube2")
         (setq *obj* (make-cube 120 120 250))
         )
        ((string= object-shape "pepperbox")
         (setq *obj* (make-cube 590 590 1390))
         (let* ((rarm-coords)
                )
           (setq rarm-coords
                 (make-cascoords :pos (float-vector 215.0 295.0 575.0)
                                 :parent *obj*))
           (send rarm-coords :put :label "rarm_end_coords")
           (send *obj* :put :coords-list (list rarm-coords))
           )
         )
        ((string= object-shape "cart")
         (load "models/room73b2-gifuplastic-900-cart-object.l")
         (defmethod room73b2-gifuplastic-900-cart-object
           (:vertices
            ()
            (send (send self :get :bbox) :worldcoords)
            (send (send self :get :bbox) :vertices)
            )
           (:edges
            ()
            (send (send self :get :backboard) :worldcoords)
            (append
             (send (elt (send (elt (send self :bodies) 17) :faces) 0) :edges)
             ;; (send (elt (send (elt (send self :bodies) 17) :faces) 1) :edges)
             (list (elt (send (elt (send self :bodies) 16) :edges) 52)
                   (elt (send (elt (send self :bodies) 15) :edges) 32)
                   (elt (send (elt (send self :bodies) 12) :edges) 26)
                   (elt (send (send self :get :backboard) :edges) 2))
             ))
           (:faces
            ()
            (list (elt (send (elt (send self :bodies) 17) :faces) 0))
            )
           )
         (setq *obj* (room73b2-gifuplastic-900-cart))
         (let* ((backboard (make-cube 10 600 10))
                )
           (send backboard :translate (float-vector 80 0 500) :world)
           (send *obj* :assoc backboard)
           (send *obj* :put :backboard backboard)
           )
         (put-bounding-box-to-object)
         )
        ((string= object-shape "door")
         (load "models/room73b2-door-right-object.l")
         (defmethod room73b2-door-right-object
           (:vertices
            ()
            (send (send self :get :bbox) :worldcoords)
            (send (send self :get :bbox) :vertices)
            )
           (:edges
            ()
            (append
             (send (elt (send (elt (send self :bodies) 1) :faces) 10) :edges)
             (send (elt (send (elt (send self :bodies) 1) :faces) 26) :edges))
            )
           (:faces
            ()
            (list (elt (send (elt (send self :bodies) 1) :faces) 10))
            )
           )
         (setq *obj* (room73b2-door-right))
         (put-bounding-box-to-object)
         (let* ((larm-coords)
                )
           (setq larm-coords
                 (make-cascoords :pos (send (send *obj* :handle-rear-knob) :worldpos)
                                 :parent *obj*))
           (send larm-coords :put :label "larm_end_coords")
           (send *obj* :put :coords-list (list larm-coords))
           )
         )
        ((string= object-shape "cupboard")
         (load "package://wholebody_manipulation_planner/model/73b2-cupboard-without-door-object.l")
         (defmethod 73b2-cupboard-without-door-object
           (:vertices
            ()
            (send (send self :get :bbox) :worldcoords)
            (send (send self :get :bbox) :vertices)
            )
           (:edges
            ()
            (append
             (send (elt (send (elt (send self :bodies) 0) :faces) 0) :edges)
             (send (elt (send (elt (send self :bodies) 1) :faces) 0) :edges)
             (send (elt (send (elt (send self :bodies) 1) :faces) 1) :edges)
             (list
              (elt (send (elt (send self :bodies) 3) :edges) 8)
              (elt (send (elt (send self :bodies) 3) :edges) 10)
              (elt (send (elt (send self :bodies) 4) :edges) 8)
              (elt (send (elt (send self :bodies) 4) :edges) 10))
             (send (elt (send (elt (send self :bodies) 5) :faces) 0) :edges)
             (send (elt (send (elt (send self :bodies) 6) :faces) 0) :edges)
             )
            )
           (:faces
            ()
            (list
             (elt (send (elt (send self :bodies) 0) :faces) 0)
             (elt (send (elt (send self :bodies) 1) :faces) 0)
             (elt (send (elt (send self :bodies) 2) :faces) 3)
             (elt (send (elt (send self :bodies) 3) :faces) 2)
             (elt (send (elt (send self :bodies) 4) :faces) 2)
             (elt (send (elt (send self :bodies) 6) :faces) 0)
             (elt (send (elt (send self :bodies) 8) :faces) 5)
             )
            )
           )
         (setq *obj* (73b2-cupboard-without-door))
         (put-bounding-box-to-object)
         )
        ((string= object-shape "table")
         (load "models/room73b2-karimoku-table-object.l")
         (defmethod room73b2-karimoku-table-object
           (:vertices
            ()
            (send (send self :get :bbox) :worldcoords)
            (send (send self :get :bbox) :vertices)
            )
           (:edges
            ()
            (append
             (send (elt (send (elt (send self :bodies) 0) :faces) 0) :edges)
             (flatten (mapcar #'(lambda (es) (list (elt es 8) (elt es 10) (elt es 12) (elt es 16))) (send-all (subseq (send self :bodies) 1) :edges))))
            )
           (:faces
            ()
            (list (elt (send (elt (send self :bodies) 0) :faces) 0))
            )
           )
         (setq *obj* (room73b2-karimoku-table))
         (put-bounding-box-to-object)
         )
        ((equal object-shape "cardboardbox")
         (setq *obj* (make-cube 290 390 350))
         )
        (t ;;(equal object-shape "cube")
         (setq *obj* (make-cube 100 100 150))
         ))
  (cond ((derivedp *obj* cascaded-link)
         (mapcar #'(lambda (b) (setf (get b :face-color) nil)) (send *obj* :bodies))
         )
        (t
         (setf (get *obj* :face-color) nil)
         ))
  )

;; utils
(defun put-bounding-box-to-object
  ()
  (let* ((bbox (make-bounding-box (flatten (send-all (send *obj* :bodies) :vertices))))
         (bbox-body (send bbox :body))
         )
    (send *obj* :assoc bbox-body)
    (send *obj* :put :bbox bbox-body)
    )
  )
