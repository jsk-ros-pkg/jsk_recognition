// -*- mode: c++; indent-tabs-mode: nil; -*-
/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2015, JSK Lab
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/o2r other materials provided
 *     with the distribution.
 *   * Neither the name of the JSK Lab nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/


#include <ros/node_handle.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>
#include <posedetection_msgs/ImageFeature0D.h>
#include <posedetection_msgs/Feature0DDetect.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/opencv.hpp>
#ifdef OPENCV_NON_FREE
#include <opencv2/nonfree/nonfree.hpp> // SIFT・SURFモジュール用
#endif
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/exact_time.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <image_transport/subscriber_filter.h>
#include <boost/shared_ptr.hpp>
#include <boost/thread/mutex.hpp>
#include <map>
#include <string>
#include <cstdio>
#include <vector>
#include <cv_bridge/cv_bridge.h>
#include <string.h>
#include <jsk_perception/image_utils.h>

using namespace std;
using namespace ros;

class SiftNode
{
  boost::mutex _mutex;
  ros::NodeHandle _node;
  image_transport::ImageTransport _it;
  image_transport::Subscriber _subImage;
  ros::ServiceServer _srvDetect;
  Subscriber _subInfo;
  Publisher _pubSift;
  posedetection_msgs::ImageFeature0D _sift_msg;
  bool _bInfoInitialized;
  std::string _detector_name;
  std::string _extractor_name;
  cv::Ptr<cv::FeatureDetector> _detector;
  cv::Ptr<cv::DescriptorExtractor> _extractor;
  cv_bridge::CvImagePtr cv_ptr;
  cv_bridge::CvImagePtr cv_mask_ptr;

  bool _useMask;
  typedef message_filters::sync_policies::ExactTime<
    sensor_msgs::Image,
    sensor_msgs::Image > SyncPolicy;
  boost::shared_ptr<message_filters::Synchronizer<SyncPolicy> > _sync;
  image_transport::SubscriberFilter _subImageSync;
  image_transport::SubscriberFilter _subMaskSync;
public:
  ros::Time lasttime;

  SiftNode() : _it(_node)
  {
    // ros::NodeHandle _local_nh("~");
    // _local_nh.param("detector", detector_name, std::string("SIFT"));
    // _local_nh.param("extractor",  _extractor_name, std::string("SIFT"));
    _detector_name="@DETECTOR@";
    _extractor_name="@EXTRACTOR@";
    ROS_INFO("detector:%s extractor:%s\n",  _detector_name.c_str() ,_extractor_name.c_str() );
    _detector = cv::FeatureDetector::create(_detector_name.c_str());
    _extractor = cv::DescriptorExtractor::create(_extractor_name.c_str());
    _pubSift = _node.advertise<posedetection_msgs::ImageFeature0D>("ImageFeature0D",1);
    ros::NodeHandle pnh("~");
    pnh.param("use_mask", _useMask, false);
    if (_useMask) {
      _subImageSync.subscribe(_it, "image", 1);
      _subMaskSync.subscribe(_it, "mask", 1);
      _sync.reset(new message_filters::Synchronizer<SyncPolicy>(
                    SyncPolicy(100), _subImageSync, _subMaskSync));
      _sync->registerCallback(boost::bind(&SiftNode::imageCb, this, _1, _2));
      _subInfo = _node.subscribe("camera_info", 1, &SiftNode::infoCb, this);
      _srvDetect = _node.advertiseService("Feature0DDetect", &SiftNode::detectCb, this);
    }
    else {
      _subImage = _it.subscribe("image", 1, &SiftNode::imageCb, this);
      _subInfo = _node.subscribe("camera_info", 1, &SiftNode::infoCb, this);
      _srvDetect = _node.advertiseService("Feature0DDetect", &SiftNode::detectCb, this);
    }
    lasttime = ros::Time::now();
    _bInfoInitialized = false;
  }
  virtual ~SiftNode() {
    _srvDetect.shutdown();
    _subInfo.shutdown();
    _subImage.shutdown();
    _pubSift.shutdown();
  }

  void infoCb(const sensor_msgs::CameraInfoConstPtr& msg_ptr)
  {
    boost::mutex::scoped_lock lock(_mutex);
    _sift_msg.info = *msg_ptr;
    _bInfoInitialized = true;
  }

  bool detectCb(posedetection_msgs::Feature0DDetect::Request& req, posedetection_msgs::Feature0DDetect::Response& res)
  {
    return detect(res.features,req.image,sensor_msgs::Image::ConstPtr());
  }

  bool detect(posedetection_msgs::Feature0D& features,
              const sensor_msgs::Image& imagemsg,
              const sensor_msgs::Image::ConstPtr& maskmsg_ptr)
  {
    boost::mutex::scoped_lock lock(_mutex);
    cv::Mat mask;
    cv::Mat original_image;
    cv::Mat roi_image;
    cv::Rect roi;
    try
      {
        cv_ptr = cv_bridge::toCvCopy(imagemsg, "bgr8");// sensor_msgs::image_encodings::BGR8);
        original_image = cv_ptr->image;
        if (maskmsg_ptr) {
          cv_mask_ptr = cv_bridge::toCvCopy(*maskmsg_ptr, maskmsg_ptr->encoding);
          mask = cv_mask_ptr->image;
          roi = jsk_perception::boundingRectOfMaskImage(mask);
          roi_image = original_image;
        }
        else {
          roi = cv::Rect(0, 0, original_image.size().width, original_image.size().height);
          roi_image = original_image;
        }
      }
    catch (cv_bridge::Exception& e)
      {
        ROS_ERROR("cv_bridge exception: %s", e.what());
        return 0;
      }



    // compute SIFT or something
    ros::Time siftbasetime = ros::Time::now();
    vector<cv::KeyPoint> keypts;
    _detector->detect(roi_image, keypts);
    ros::Time detect_end_time = ros::Time::now();

    int numkeys = keypts.size();
    cv::Mat descriptor;
    _extractor->compute(roi_image, keypts, descriptor);
    // fix keypoint by un-roi-ing
    for (size_t i = 0; i < keypts.size(); i++) {
      keypts[i].pt.x = keypts[i].pt.x  + roi.x;
      keypts[i].pt.y = keypts[i].pt.y  + roi.y;
    }
    ros::Time extract_end_time = ros::Time::now();
    // publish
    features.header = imagemsg.header;
    features.positions.resize(numkeys*2);
    features.scales.resize(numkeys);
    features.orientations.resize(numkeys);
    features.confidences.resize(numkeys);
    int size_d = descriptor.cols;
    ROS_INFO("size = %d", size_d);
    features.descriptors.resize(numkeys*size_d);
    features.descriptor_dim = size_d;
    features.type = "cv_sift";

    int index = 0;

    while(index<numkeys) {
      if(!strcmp("SIFT", _extractor_name.c_str()) || !strcmp("SURF", _extractor_name.c_str())){
        for(int j = 0; j < size_d; ++j){
          features.descriptors[size_d*index+j] = descriptor.at<float>(index, j);
        }
      }
      else{
        for(int j = 0; j < size_d; ++j){
          features.descriptors[size_d*index+j] = descriptor.at<bool>(index, j);
        }
      }
      features.positions[2*index+0] = keypts.at(index).pt.x;
      features.positions[2*index+1] = keypts.at(index).pt.y;
      features.scales[index] = keypts.at(index).size;
      features.orientations[index] = keypts.at(index).angle;
      features.confidences[index] = 1.0; // SIFT has no confidence?
      ++index;
    }



    ROS_INFO("image_feature: image: %d(size=%lu), num: %d, feature time: %.3fs(keypoint-detect time: %.3fs, feature-extract time: %.3f, other time: %.3f), total: %.3fs", imagemsg.header.seq,
             imagemsg.data.size(),  numkeys,
             (float)(ros::Time::now()-siftbasetime).toSec(),
             (float)(detect_end_time-siftbasetime).toSec(), (float)(extract_end_time-detect_end_time).toSec(), (float)(ros::Time::now()-extract_end_time).toSec(),
             (float)(ros::Time::now()-lasttime).toSec());

    lasttime = ros::Time::now() ;
    return true;
  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg_ptr,
                const sensor_msgs::ImageConstPtr& mask_ptr)
  {
    if(_pubSift.getNumSubscribers()==0){
      ROS_DEBUG("number of subscribers is 0, ignoring image");
      return;
    }
    if(!_bInfoInitialized) {
      ROS_DEBUG("camera info not initialized, ignoring image");
      return;
    }

    detect(_sift_msg.features, *msg_ptr, mask_ptr);
    _sift_msg.image = *msg_ptr; // probably copying pointers so don't use after this call

    {
      boost::mutex::scoped_lock lock(_mutex); // needed for camerainfo
      _pubSift.publish(_sift_msg);
    }

  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg_ptr)
  {
    imageCb(msg_ptr, sensor_msgs::ImageConstPtr());
  }
};

int main(int argc, char **argv)
{
  ros::init(argc,argv,"imagesift");
  if( !ros::master::check() )
        return 1;
#ifdef OPENCV_NON_FREE
  cv::initModule_nonfree();
#endif
  boost::shared_ptr<SiftNode> siftnode(new SiftNode());

  ros::spin();
  siftnode.reset();
  return 0;
}
