#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

try:
    import imp
    imp.find_module(PACKAGE)
    from dynamic_reconfigure.parameter_generator_catkin import *;
except:
    import roslib; roslib.load_manifest(PACKAGE)
    from dynamic_reconfigure.parameter_generator import *;

from math import pi

gen = ParameterGenerator ()
algo_enum = gen.enum([gen.const("ICP", int_t, 0, "ICP"),
                      gen.const("GICP", int_t, 1, "GICP"),
                      gen.const("NDT", int_t, 2, "NDT")],
                      "algorithm")
gen.add("algorithm", int_t, 0, "algorithm", 0, 0, 1,
        edit_method = algo_enum)
correspondence_enum = gen.enum([gen.const("NN", int_t, 0, "NN"),
                                gen.const("Projective", int_t, 1, "Projective")],
                                "correspondence_algorithm")
gen.add("correspondence_algorithm", int_t, 0, "correspondence_algorithm", 0, 0, 1,
        edit_method = correspondence_enum)
gen.add("use_flipped_initial_pose", bool_t, 0, "consider flipped initial pose", True)
gen.add("max_iteration", int_t, 0, "the maximum iteration", 100, 0, 10000)
gen.add("correspondence_distance", double_t, 0,
                                   "distance to ignore to calculate correspondence",
                                   10, 0, 100)
gen.add("transform_epsilon", double_t, 0, "transform epsion to stop iteration",
        1e-9, 1e-9, 1.0)
gen.add("euclidean_fittness_epsilon", double_t, 0, "euclidean fittness epsilon",
        0.01, 0.0001, 1.0)
gen.add("rotation_epsilon", double_t, 0, "rotation epsilon (only for GICP)",
        2e-3, 1e-9, 1)
gen.add("ransac_iterations", int_t, 0, "ransac iterations",
        1000, 1, 10000)
gen.add("ransac_outlier_threshold", double_t, 0, "ransac outlier threshold",
        0.05, 0.01, 1.0)
gen.add("correspondence_randomness", int_t, 0,
        "correspondence randomness (only for GICP)",
        20, 1, 100)
gen.add("maximum_optimizer_iterations", int_t, 0,
        "maximum optimizer iterations (only for GICP)",
        20, 1, 100)
gen.add("ndt_resolution", double_t, 0, "", 1.0, 0.000001, 10.0)
gen.add("ndt_step_size", double_t, 0, "", 0.05, 0.000001, 1.0)
gen.add("ndt_outlier_ratio", double_t, 0, "", 0.35, 0.000001, 1.0)
exit (gen.generate (PACKAGE, "jsk_pcl_ros", "ICPRegistration"))
