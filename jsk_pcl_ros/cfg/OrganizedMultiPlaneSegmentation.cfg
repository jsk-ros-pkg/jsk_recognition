#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

from dynamic_reconfigure.parameter_generator_catkin import *;

from math import pi

gen = ParameterGenerator ()
gen.add("min_size", int_t, 0, "the minimum number of the points of each cluster", 2000, 0, 10000)
gen.add("distance_threshold", double_t, 0, "distance threshold of organized plane segmentation", 0.01, 0, 1.0)
gen.add("angular_threshold", double_t, 0, "angular threshold of organized plane segmentation", 0.05, 0, 0.1)
gen.add("max_curvature", double_t, 0, "maximum curvature of organized plane segmentation", 0.001, 0, 10.0)
gen.add("connect_plane_angle_threshold", double_t, 0, "plane angle threshold of connecting the planes", 0.2, 0, pi)
gen.add("connect_distance_threshold", double_t, 0, "distance threshold of connecting the planes", 0.01, 0, 1.0)
estimation_method_enum = gen.enum([gen.const("AVERAGE_3D_GRADIENT", int_t, 0, "AVERAGE 3D GRADIENT, no curvature is available"),
                                   gen.const("COVARIANCE_MATRIX", int_t, 1, "COVARIANCE_MATRIX, curvature is available"),
                                   gen.const("AVERAGE_DEPTH_CHANGE", int_t, 2, "AVERAGE_DEPTH_CHANGE, no curvature is available")],
                                   "normal estimation method")
gen.add("max_depth_change_factor", double_t, 0, "max depth change factor", 0.02, 0.0, 1.0)
gen.add("normal_smoothing_size", double_t, 0, "normal smoothing size parameter", 20.0, 0.0, 100.0)
gen.add("estimation_method", int_t, 0, "estimation method", 1, 0, 2, edit_method = estimation_method_enum)
gen.add("depth_dependent_smoothing", bool_t, 0, "use depth dependent smoothing", False)
gen.add("border_policy_ignore", bool_t, 0, "ignore border policy", True)
gen.add("ransac_refine_coefficients", bool_t, 0, "refine coefficients by RANSAC", True)
gen.add("ransac_refine_outlier_distance_threshold", double_t, 0, "distance threshold  for ransac refinement", 0.1, 0.0, 0.3)
gen.add("publish_normal", bool_t, 0, "publish normal pointcloud", False)
gen.add("min_refined_area_threshold", double_t, 0,
        "minimum area threshold for refined convex polygons", 0.2 * 0.2, 0, 100.0)
gen.add("max_refined_area_threshold", double_t, 0,
        "maximum area threshold for refined convex polygons", 100 * 100, 0, 100 * 100)
#gen.add("concave_alpha", double_t, 0, "alpha parameter for concave estimation", 0.1, 0, 1.0)

exit (gen.generate (PACKAGE, "jsk_pcl_ros", "OrganizedMultiPlaneSegmentation"))
